#+TITLE: LangChain 核心模块学习：Chains（sequential_chain）
#+STARTUP: showall hidestars indent inlineimages
#+PROPERTY: header-args:jupyter-python :session 2024人工智能学习-LangChain-chains-sequential :display text/plain

对于简单的大模型应用，单独使用语言模型（LLMs）是可以的。

*但更复杂的大模型应用需要将 =LLMs= 和 =Chat Models= 链接在一起 - 要么彼此链接，要么与其他组件链接。*

LangChain 为这种“链式”应用程序提供了 =Chain= 接口。

LangChain 以通用方式定义了 =Chain= ，它是对组件进行调用序列的集合，其中可以包含其他链。

* Chain Class 基类
类继承关系：

#+begin_example
Chain --> <name>Chain  # Examples: LLMChain, MapReduceChain, RouterChain
#+end_example

*代码实现：[[https://github.com/langchain-ai/langchain/blob/master/libs/langchain/langchain/chains/base.py]]*

#+begin_src python :eval no
  # 定义一个名为Chain的基础类
  class Chain(Serializable, Runnable[Dict[str, Any], Dict[str, Any]], ABC):
      """为创建结构化的组件调用序列的抽象基类。
    
      链应该用来编码对组件的一系列调用，如模型、文档检索器、其他链等，并为此序列提供一个简单的接口。
    
      Chain接口使创建应用程序变得容易，这些应用程序是：
      - 有状态的：给任何Chain添加Memory可以使它具有状态，
      - 可观察的：向Chain传递Callbacks来执行额外的功能，如记录，这在主要的组件调用序列之外，
      - 可组合的：Chain API足够灵活，可以轻松地将Chains与其他组件结合起来，包括其他Chains。
    
      链公开的主要方法是：
      - `__call__`：链是可以调用的。`__call__`方法是执行Chain的主要方式。它将输入作为一个字典接收，并返回一个字典输出。
      - `run`：一个方便的方法，它以args/kwargs的形式接收输入，并将输出作为字符串或对象返回。这种方法只能用于一部分链，不能像`__call__`那样返回丰富的输出。
      """

      # 调用链
      def invoke(
          self, input: Dict[str, Any], config: Optional[runnableConfig] = None
      ) -> Dict[str, Any]:
          """传统调用方法。"""
          return self(input, **(config or {}))

      # 链的记忆，保存状态和变量
      memory: Optional[BaseMemory] = None
      """可选的内存对象，默认为None。
      内存是一个在每个链的开始和结束时被调用的类。在开始时，内存加载变量并在链中传递它们。在结束时，它保存任何返回的变量。
      有许多不同类型的内存，请查看内存文档以获取完整的目录。"""

      # 回调，可能用于链的某些操作或事件。
      callbacks: Callbacks = Field(default=None, exclude=True)
      """可选的回调处理程序列表（或回调管理器）。默认为None。
      在对链的调用的生命周期中，从on_chain_start开始，到on_chain_end或on_chain_error结束，都会调用回调处理程序。
      每个自定义链可以选择调用额外的回调方法，详细信息请参见Callback文档。"""

      # 是否详细输出模式
      verbose: bool = Field(default_factory=_get_verbosity)
      """是否以详细模式运行。在详细模式下，一些中间日志将打印到控制台。默认值为`langchain.verbose`。"""

      # 与链关联的标签
      tags: Optional[List[str]] = None
      """与链关联的可选标签列表，默认为None。
      这些标签将与对这个链的每次调用关联起来，并作为参数传递给在`callbacks`中定义的处理程序。
      你可以使用这些来例如识别链的特定实例与其用例。"""

      # 与链关联的元数据
      metadata: Optional[Dict[str, Any]] = None
      """与链关联的可选元数据，默认为None。
      这些元数据将与对这个链的每次调用关联起来，并作为参数传递给在`callbacks`中定义的处理程序。
      你可以使用这些来例如识别链的特定实例与其用例。"""
#+end_src

* LLMChain
LLMChain 是 LangChain 中最简单的链，作为其他复杂 Chains 和 Agents 的内部调用，被广泛应用。

一个LLMChain由PromptTemplate和语言模型（LLM or Chat Model）组成。
它使用直接传入（或 memory 提供）的 key-value 来规范化生成 Prompt Template（提示模板），并将生成的 prompt （格式化后的字符串）传递给大模型，并返回大模型输出。

#+ATTR_ORG: :width 800
[[../images/llm_chain.png]]

#+begin_src jupyter-python :results none
  from pprint import pprint
  from langchain_openai import OpenAI
  from langchain.prompts import PromptTemplate

  base_url='https://api.xty.app/v1'

  llm = OpenAI(model_name="gpt-3.5-turbo-instruct", temperature=0.9, max_tokens=500, base_url=base_url)
#+end_src

#+begin_src jupyter-python :results none
  prompt = PromptTemplate(
      input_variables=["product"],
      template="给制造{product}的有限公司取10个好名字，并给出完整的公司名称",
  )
#+end_src

#+begin_src jupyter-python
  from langchain.chains import LLMChain

  chain = LLMChain(llm=llm, prompt=prompt)
  print(chain.run({
      'product': "性能卓越的GPU"
      }))
#+end_src

#+RESULTS:
#+begin_example
  /Users/wangjian/.virtualenvs/jupyter/lib/python3.12/site-packages/langchain_core/_api/deprecation.py:119: LangChainDeprecationWarning: The class `LLMChain` was deprecated in LangChain 0.1.17 and will be removed in 0.3.0. Use RunnableSequence, e.g., `prompt | llm` instead.
    warn_deprecated(
  /Users/wangjian/.virtualenvs/jupyter/lib/python3.12/site-packages/langchain_core/_api/deprecation.py:119: LangChainDeprecationWarning: The method `Chain.run` was deprecated in langchain 0.1.0 and will be removed in 0.3.0. Use invoke instead.
    warn_deprecated(


  1. 速翼科技有限公司 (SwiftWing Technologies Co., Ltd.)
  2. 强力晶迅有限公司 (PowerCrystal Xun Co., Ltd.)
  3. 磐石科技有限公司 (RockTech Solutions Co., Ltd.)
  4. 极光卓越有限公司 (Aurora Excellence Co., Ltd.)
  5. 炎龙制造有限公司 (FlameDragon Fabrications Co., Ltd.)
  6. 星核科技有限公司 (StarCore Technologies Co., Ltd.)
  7. 创导高性能有限公司 (Innovate High-Performance Co., Ltd.)
  8. 飞鸟科技有限公司 (FlyingBird Technologies Co., Ltd.)
  9. 超越视界有限公司 (BeyondVision Solutions Co., Ltd.)
  10. 焚焰创新有限公司 (BlazeInnovate Co., Ltd.)
#+end_example

#+begin_src jupyter-python :results none
  chain.verbose = True
#+end_src

#+begin_src jupyter-python
  chain.verbose
#+end_src

#+RESULTS:
: True
#+begin_src jupyter-python
  print(chain.run({
      'product': "性能卓越的GPU"
      }))
#+end_src

#+RESULTS:
#+begin_example


  [1m> Entering new LLMChain chain...[0m
  Prompt after formatting:
  [32;1m[1;3m给制造性能卓越的GPU的有限公司取10个好名字，并给出完整的公司名称[0m

  [1m> Finished chain.[0m



  1. 创新视界科技有限公司
  2. 先锋图像科技有限公司
  3. 强劲视界半导体有限公司
  4. 极致计算科技有限公司
  5. 智能图像解决方案有限公司
  6. 飞跃半导体科技有限公司
  7. 高端图像处理科技有限公司
  8. 全新视觉科技有限公司
  9. 天马行空图像科技有限公司
  10. 源源不断半导体科技有限公司
#+end_example

* Sequential Chain
串联式调用语言模型（将一个调用的输出作为另一个调用的输入）。

顺序链（Sequential Chain）允许用户连接多个链并将它们组合成执行特定场景的流水线（Pipeline）。
有两种类型的顺序链：

- SimpleSequentialChain：最简单形式的顺序链，每个步骤都具有单一输入/输出，并且一个步骤的输出是下一个步骤的输入。
- SequentialChain：更通用形式的顺序链，允许多个输入/输出。

** 使用 SimpleSequentialChain 实现戏剧摘要和评论（单输入/单输出）
#+ATTR_ORG: :width 800
[[../images/simple_sequential_chain_0.png]]

#+begin_src jupyter-python :results none
  # 这是一个 LLMChain，用于根据剧目的标题撰写简介。

  llm = OpenAI(temperature=0.7, max_tokens=1000, base_url=base_url)

  template = """你是一位剧作家。根据戏剧的标题，你的任务是为该标题写一个简介。

  标题：{title}
  剧作家：以下是对上述戏剧的简介："""

  prompt_template = PromptTemplate(input_variables=["title"], template=template)
  synopsis_chain = LLMChain(llm=llm, prompt=prompt_template)
#+end_src

#+begin_src jupyter-python :results none
  # 这是一个LLMChain，用于根据剧情简介撰写一篇戏剧评论。
  # llm = OpenAI(temperature=0.7, max_tokens=1000)
  template = """你是《纽约时报》的戏剧评论家。根据剧情简介，你的工作是为该剧撰写一篇评论。

  剧情简介：
  {synopsis}

  以下是来自《纽约时报》戏剧评论家对上述剧目的评论："""

  prompt_template = PromptTemplate(input_variables=["synopsis"], template=template)
  review_chain = LLMChain(llm=llm, prompt=prompt_template)
#+end_src

#+ATTR_ORG: :width 800
[[../images/simple_sequential_chain_1.png]]

#+begin_src jupyter-python :results none
  # 这是一个SimpleSequentialChain，按顺序运行这两个链
  from langchain.chains import SimpleSequentialChain

  overall_chain = SimpleSequentialChain(chains=[synopsis_chain, review_chain], verbose=True)
#+end_src

#+begin_src jupyter-python
  review = overall_chain.run("三体人不是无法战胜的")
#+end_src

#+RESULTS:
#+begin_example


  [1m> Entering new SimpleSequentialChain chain...[0m
  [36;1m[1;3m

  《三体人不是无法战胜的》讲述了一个关于人类和外星种族三体人的故事。在未来，人类发现了一颗宇宙中心的星球，它被称为三体世界，这里的生物拥有超强的科技能力和不可思议的智慧。人类与三体人开始了一场殊死的战争，双方都想要摧毁对方，但是随着战争的进行，人类发现三体人并非无法战胜。随着故事的发展，人类和三体人之间的关系变得复杂起来，他们开始思考战争的意义和自己的生存。最终，人类和三体人达成了和解，并共同面对更大的威胁。这部戏剧探讨了战争、和平、智慧和生存的主题，带给观众深刻的思考。[0m
  [33;1m[1;3m

  《三体人不是无法战胜的》是一部令人印象深刻的戏剧作品，它以宏大的宇宙背景为舞台，探讨了人类和外星种族三体人之间的关系。该剧引人入胜的剧情和深刻的主题，让观众在观看的同时也深思人类的未来和我们对战争的理解。

  剧中，人类发现了超强科技能力和智慧的三体世界，展开了一场殊死的战争。然而，随着战争的进行，人类发现三体人并非无法战胜，这让他们开始思考战争的意义和自身的生存。剧中角色的复杂性和演员们精湛的表演，让观众不仅仅是被动的观看，而是被带入到故事中去，和角色一起思考。

  该剧还探讨了和平、智慧和生存的主题。通过人类和三体人之间的对话和互动，观众可以深刻感受到战争对人类的影响，以及和平对人类的重要性。同时，剧中展现的三体人的智慧和科技能力也让观众反思人类的未来发展方向。

  最终，人类和三体人达成了和解，并共同面对更大的威胁。这种宽容和团结的态度，也让观众感受到戏剧中蕴含的积极向上的力量。

  总的来说，《三体人不是无法战胜的》是一部充满智慧和思考的戏剧作品。它不仅仅是一场娱乐，更是一次关于人类未来和和平的思考之旅。观众们在欣赏剧中精彩的表演的同时，也会被带入到深思的境界中。这部戏剧绝对值得观看。[0m

  [1m> Finished chain.[0m
#+end_example

#+begin_src jupyter-python
  review = overall_chain.run("星球大战第九季")
#+end_src

#+RESULTS:
#+begin_example


  > Entering new SimpleSequentialChain chain...
  《星球大战第九季》

  在这部戏剧中，银河系再次陷入了混乱和冲突之中。一场新的战争即将爆发，旧的联盟和新的敌人之间的对抗再次引发了整个宇宙的动荡。然而，在这个动荡的时代，一群英雄和反抗者崛起，试图守护和平与正义。

  主角们面临着前所未有的考验，他们的决定将决定整个银河系的命运。在这个冲突的背后，隐藏着深层的阴谋和意图，每个角色都被推向了自己信仰和价值观的边缘。友谊、勇气和背叛交织在一起，为观众呈现了一个充满戏剧性和惊喜的故事。

  《星球大战第九季》不仅是一场史诗般的冒险，更是一段关于信念、权力和自我牺牲的探索。在这个宇宙中，每个人都有自己的角色扮演，每个选择都将产生深远的影响。这是一场关于光明与黑暗之间永恒对抗的戏剧，也是关于希望与绝望的永恒较量。
  《星球大战第九季》的舞台无疑是一个星际舞台，但其故事却牵动着人类内心最深处的情感和信仰。这部剧集以其震撼人心的战斗场面和令人难忘的角色形象，再次将观众带入了一个充满奇幻和冒险的世界。

  故事的核心是一场旷日持久的斗争，这不仅仅是一场星球之间的战争，更是一场对信念和自由的争夺。主角们在命运的操控下，被迫面对艰难的选择，他们的决定将直接影响整个银河系的未来。这种内在的冲突和外在的战斗构成了剧集的核心张力，也是吸引观众的重要因素之一。

  在这个宇宙中，每个角色都被赋予了独特而深刻的内心世界。观众将目睹他们的成长、挣扎和崛起，这些都是人性的真实写照。友谊、勇气和背叛交织在一起，为观众呈现了一个充满戏剧性和惊喜的故事。

  除了令人激动的战斗场面和精彩的特效外，《星球大战第九季》还探索了一系列深刻的主题，如权力、自我牺牲和希望。这使得剧集不仅仅是一场娱乐，更是一次对人性和社会价值观的深度反思。

  总的来说，《星球大战第九季》是一部令人兴奋的史诗般冒险，它引人入胜的故事情节和深刻的主题使其成为一部不容错过的作品。

  > Finished chain.
#+end_example

** 使用 SequentialChain 实现戏剧摘要和评论（多输入/多输出）
#+ATTR_ORG: :width 800
[[../images/sequential_chain_0.png]]

#+begin_src jupyter-python :results none
  # # 这是一个 LLMChain，根据剧名和设定的时代来撰写剧情简介。
  llm = OpenAI(temperature=.7, max_tokens=1000, base_url=base_url)
  template = """你是一位剧作家。根据戏剧的标题和设定的时代，你的任务是为该标题写一个简介。

  标题：{title}
  时代：{era}
  剧作家：以下是对上述戏剧的简介："""

  prompt_template = PromptTemplate(input_variables=["title", "era"], template=template)
  # output_key
  synopsis_chain = LLMChain(llm=llm, prompt=prompt_template, output_key="synopsis", verbose=True)
#+end_src

#+begin_src jupyter-python :results none
  # 这是一个LLMChain，用于根据剧情简介撰写一篇戏剧评论。

  template = """你是《纽约时报》的戏剧评论家。根据该剧的剧情简介，你需要撰写一篇关于该剧的评论。

  剧情简介：
  {synopsis}

  来自《纽约时报》戏剧评论家对上述剧目的评价："""

  prompt_template = PromptTemplate(input_variables=["synopsis"], template=template)
  review_chain = LLMChain(llm=llm, prompt=prompt_template, output_key="review", verbose=True)
#+end_src

#+begin_src jupyter-python :results none
  from langchain.chains import SequentialChain

  m_overall_chain = SequentialChain(
      chains=[synopsis_chain, review_chain],
      input_variables=["era", "title"],
      # Here we return multiple variables
      output_variables=["synopsis", "review"],
      verbose=True)
#+end_src

#+begin_src jupyter-python
  m_overall_chain({"title":"三体人不是无法战胜的", "era": "二十一世纪的新中国"})
#+end_src

#+RESULTS:
#+begin_example


  [1m> Entering new SequentialChain chain...[0m


  [1m> Entering new LLMChain chain...[0m
  Prompt after formatting:
  [32;1m[1;3m你是一位剧作家。根据戏剧的标题和设定的时代，你的任务是为该标题写一个简介。

  标题：三体人不是无法战胜的
  时代：二十一世纪的新中国
  剧作家：以下是对上述戏剧的简介：[0m

  [1m> Finished chain.[0m


  [1m> Entering new LLMChain chain...[0m
  Prompt after formatting:
  [32;1m[1;3m你是《纽约时报》的戏剧评论家。根据该剧的剧情简介，你需要撰写一篇关于该剧的评论。

  剧情简介：


  在二十一世纪的新中国，一场前所未有的危机降临到了人类的头上。一群来自外星的三体人入侵地球，他们拥有超强的科技和战斗力，让人类陷入了绝境。然而，面对这样的敌人，人类并没有束手待毙，他们团结一心，凭借着自己的智慧和勇气，展开了一场生死搏斗。

  在这场战争中，人类的科学家们发挥着重要的作用，他们研究三体人的科技，试图找到对抗他们的方法。同时，一位年轻的女科学家也在这次危机中发挥着至关重要的作用，她不仅在研究中发现了三体人的弱点，还带领着人类战士们勇敢地与三体人作战。

  在战争的过程中，人类也发现了三体人的弱点并不只是他们的科技，还有着他们内心的软弱。随着战争的进行，人类开始反思自己，思考与三体人和平共处的可能性。最终，在经历了一系列的挑战和考验后，人类不仅战胜了三体人，也找到了与他们和平共处的方法。

  这部戏剧讲述了人类在面对强大的外敌时的勇气和智慧，也反映了人类的内心世界和对和平的渴望。它告诉我们，在困难的时刻，团结一心，勇敢地面对挑战，人类是无法被击败的。同时，它也向我们展示了一种可能，即不同种族之间可以和平共处，而不是仅仅通过战争来解决问题。让我们一起感受这场关于勇气、智慧和和平的戏剧，一起探索人类的未来。

  来自《纽约时报》戏剧评论家对上述剧目的评价：[0m

  [1m> Finished chain.[0m

  [1m> Finished chain.[0m
#+end_example

** Homework
*** 使用 OutputParser 优化 overall_chain 输出格式，区分 synopsis_chain 和 review_chain 的结果
